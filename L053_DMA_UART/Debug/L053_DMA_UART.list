
L053_DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080003a4  080003a4  000103a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080003ac  080003ac  000103b4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ac  080003ac  000103b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ac  080003b4  000103b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ac  080003ac  000103ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003b0  080003b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003b4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003b4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000103b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000610  00000000  00000000  000103dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001bb  00000000  00000000  000109ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  00010c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b4f7  00000000  00000000  00010c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006a9  00000000  00000000  0001c177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003d2ed  00000000  00000000  0001c820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00059b0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000010c  00000000  00000000  00059b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800038c 	.word	0x0800038c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800038c 	.word	0x0800038c

08000108 <DMA_set>:
typedef enum {
	ToMem,
	ToPeripheral
}DMA_Direction;

void DMA_set(DMA_Channel_TypeDef* DMA_ch, void* address_p, void* address_m){
 8000108:	b580      	push	{r7, lr}
 800010a:	b084      	sub	sp, #16
 800010c:	af00      	add	r7, sp, #0
 800010e:	60f8      	str	r0, [r7, #12]
 8000110:	60b9      	str	r1, [r7, #8]
 8000112:	607a      	str	r2, [r7, #4]
	DMA_ch->CPAR = (uint32_t)(address_p);
 8000114:	68ba      	ldr	r2, [r7, #8]
 8000116:	68fb      	ldr	r3, [r7, #12]
 8000118:	609a      	str	r2, [r3, #8]
	DMA_ch->CMAR = (uint32_t)(address_m);
 800011a:	687a      	ldr	r2, [r7, #4]
 800011c:	68fb      	ldr	r3, [r7, #12]
 800011e:	60da      	str	r2, [r3, #12]
}
 8000120:	46c0      	nop			; (mov r8, r8)
 8000122:	46bd      	mov	sp, r7
 8000124:	b004      	add	sp, #16
 8000126:	bd80      	pop	{r7, pc}

08000128 <DMA_start>:
void DMA_start(DMA_Channel_TypeDef* DMA_ch, DMA_size p_size, DMA_size m_size, DMA_Direction dir, uint32_t size, bool circular, bool inc_p){
 8000128:	b590      	push	{r4, r7, lr}
 800012a:	b083      	sub	sp, #12
 800012c:	af00      	add	r7, sp, #0
 800012e:	6078      	str	r0, [r7, #4]
 8000130:	000c      	movs	r4, r1
 8000132:	0010      	movs	r0, r2
 8000134:	0019      	movs	r1, r3
 8000136:	1cfb      	adds	r3, r7, #3
 8000138:	1c22      	adds	r2, r4, #0
 800013a:	701a      	strb	r2, [r3, #0]
 800013c:	1cbb      	adds	r3, r7, #2
 800013e:	1c02      	adds	r2, r0, #0
 8000140:	701a      	strb	r2, [r3, #0]
 8000142:	1c7b      	adds	r3, r7, #1
 8000144:	1c0a      	adds	r2, r1, #0
 8000146:	701a      	strb	r2, [r3, #0]
	DMA_ch->CCR &= ~DMA_CCR_EN;
 8000148:	687b      	ldr	r3, [r7, #4]
 800014a:	681b      	ldr	r3, [r3, #0]
 800014c:	2201      	movs	r2, #1
 800014e:	4393      	bics	r3, r2
 8000150:	001a      	movs	r2, r3
 8000152:	687b      	ldr	r3, [r7, #4]
 8000154:	601a      	str	r2, [r3, #0]
	DMA_ch->CNDTR = size;
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	69ba      	ldr	r2, [r7, #24]
 800015a:	605a      	str	r2, [r3, #4]
	DMA_ch->CCR =
				(m_size << DMA_CCR_MSIZE_Pos) |
 800015c:	1cbb      	adds	r3, r7, #2
 800015e:	781b      	ldrb	r3, [r3, #0]
 8000160:	029a      	lsls	r2, r3, #10
				(p_size << DMA_CCR_PSIZE_Pos) |
 8000162:	1cfb      	adds	r3, r7, #3
 8000164:	781b      	ldrb	r3, [r3, #0]
 8000166:	021b      	lsls	r3, r3, #8
				(m_size << DMA_CCR_MSIZE_Pos) |
 8000168:	4313      	orrs	r3, r2
 800016a:	001a      	movs	r2, r3
				(DMA_CCR_MINC) |
				(inc_p << DMA_CCR_PINC_Pos) |
 800016c:	2320      	movs	r3, #32
 800016e:	18fb      	adds	r3, r7, r3
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	019b      	lsls	r3, r3, #6
				(DMA_CCR_MINC) |
 8000174:	4313      	orrs	r3, r2
				(circular << DMA_CCR_CIRC_Pos) |
 8000176:	221c      	movs	r2, #28
 8000178:	18ba      	adds	r2, r7, r2
 800017a:	7812      	ldrb	r2, [r2, #0]
 800017c:	0152      	lsls	r2, r2, #5
				(inc_p << DMA_CCR_PINC_Pos) |
 800017e:	4313      	orrs	r3, r2
				(dir << DMA_CCR_DIR_Pos) |
 8000180:	1c7a      	adds	r2, r7, #1
 8000182:	7812      	ldrb	r2, [r2, #0]
 8000184:	0112      	lsls	r2, r2, #4
				(circular << DMA_CCR_CIRC_Pos) |
 8000186:	4313      	orrs	r3, r2
				(dir << DMA_CCR_DIR_Pos) |
 8000188:	2281      	movs	r2, #129	; 0x81
 800018a:	431a      	orrs	r2, r3
	DMA_ch->CCR =
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	601a      	str	r2, [r3, #0]
				(DMA_CCR_EN);
}
 8000190:	46c0      	nop			; (mov r8, r8)
 8000192:	46bd      	mov	sp, r7
 8000194:	b003      	add	sp, #12
 8000196:	bd90      	pop	{r4, r7, pc}

08000198 <main>:
static inline void DMA_init();



int main(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b088      	sub	sp, #32
 800019c:	af04      	add	r7, sp, #16
	uint8_t send_data[] = {'H', 'e', 'l', 'l', 'o', '\n', '\r'};
 800019e:	1d3b      	adds	r3, r7, #4
 80001a0:	4a19      	ldr	r2, [pc, #100]	; (8000208 <main+0x70>)
 80001a2:	6811      	ldr	r1, [r2, #0]
 80001a4:	6019      	str	r1, [r3, #0]
 80001a6:	8891      	ldrh	r1, [r2, #4]
 80001a8:	8099      	strh	r1, [r3, #4]
 80001aa:	7992      	ldrb	r2, [r2, #6]
 80001ac:	719a      	strb	r2, [r3, #6]

	PWR_init();
 80001ae:	f000 f833 	bl	8000218 <PWR_init>
	GPIO_init();
 80001b2:	f000 f83f 	bl	8000234 <GPIO_init>
	UART_init();
 80001b6:	f000 f87b 	bl	80002b0 <UART_init>
	DMA_init();
 80001ba:	f000 f863 	bl	8000284 <DMA_init>

	/**
	 * DMA set
	 */
	DMA_set(DMA_CH_USART2_TX, (void*)&USART2->TDR, (void*)send_data);
 80001be:	1d3b      	adds	r3, r7, #4
 80001c0:	4912      	ldr	r1, [pc, #72]	; (800020c <main+0x74>)
 80001c2:	4813      	ldr	r0, [pc, #76]	; (8000210 <main+0x78>)
 80001c4:	001a      	movs	r2, r3
 80001c6:	f7ff ff9f 	bl	8000108 <DMA_set>


	while(true){
		DMA_start(DMA_CH_USART2_TX, SizeByte, SizeByte, ToPeripheral, sizeof(send_data), false, false);
 80001ca:	4811      	ldr	r0, [pc, #68]	; (8000210 <main+0x78>)
 80001cc:	2300      	movs	r3, #0
 80001ce:	9302      	str	r3, [sp, #8]
 80001d0:	2300      	movs	r3, #0
 80001d2:	9301      	str	r3, [sp, #4]
 80001d4:	2307      	movs	r3, #7
 80001d6:	9300      	str	r3, [sp, #0]
 80001d8:	2301      	movs	r3, #1
 80001da:	2200      	movs	r2, #0
 80001dc:	2100      	movs	r1, #0
 80001de:	f7ff ffa3 	bl	8000128 <DMA_start>
		GPIOA->ODR ^= (0b1 << 5);
 80001e2:	23a0      	movs	r3, #160	; 0xa0
 80001e4:	05db      	lsls	r3, r3, #23
 80001e6:	695a      	ldr	r2, [r3, #20]
 80001e8:	23a0      	movs	r3, #160	; 0xa0
 80001ea:	05db      	lsls	r3, r3, #23
 80001ec:	2120      	movs	r1, #32
 80001ee:	404a      	eors	r2, r1
 80001f0:	615a      	str	r2, [r3, #20]

		for(uint32_t i = 0 ;i < 1e5; ++i);
 80001f2:	2300      	movs	r3, #0
 80001f4:	60fb      	str	r3, [r7, #12]
 80001f6:	e002      	b.n	80001fe <main+0x66>
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	3301      	adds	r3, #1
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <main+0x7c>)
 8000202:	4293      	cmp	r3, r2
 8000204:	d9f8      	bls.n	80001f8 <main+0x60>
		DMA_start(DMA_CH_USART2_TX, SizeByte, SizeByte, ToPeripheral, sizeof(send_data), false, false);
 8000206:	e7e0      	b.n	80001ca <main+0x32>
 8000208:	080003a4 	.word	0x080003a4
 800020c:	40004428 	.word	0x40004428
 8000210:	40020080 	.word	0x40020080
 8000214:	0001869f 	.word	0x0001869f

08000218 <PWR_init>:
}




void PWR_init(){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <PWR_init+0x18>)
 800021e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000220:	4b03      	ldr	r3, [pc, #12]	; (8000230 <PWR_init+0x18>)
 8000222:	2180      	movs	r1, #128	; 0x80
 8000224:	0549      	lsls	r1, r1, #21
 8000226:	430a      	orrs	r2, r1
 8000228:	639a      	str	r2, [r3, #56]	; 0x38
}
 800022a:	46c0      	nop			; (mov r8, r8)
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	40021000 	.word	0x40021000

08000234 <GPIO_init>:
void GPIO_init(){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	 * A5 ->	LD2[output]
	 * A13 ->	SWDIO
	 * A14 ->	SWCLK
	 * C13 ->	B1[input]
	 */
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN | RCC_IOPENR_GPIOCEN;
 8000238:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <GPIO_init+0x40>)
 800023a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800023c:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <GPIO_init+0x40>)
 800023e:	2105      	movs	r1, #5
 8000240:	430a      	orrs	r2, r1
 8000242:	62da      	str	r2, [r3, #44]	; 0x2c

	//Reset A4,
	GPIOA->MODER =
 8000244:	23a0      	movs	r3, #160	; 0xa0
 8000246:	05db      	lsls	r3, r3, #23
 8000248:	4a0b      	ldr	r2, [pc, #44]	; (8000278 <GPIO_init+0x44>)
 800024a:	601a      	str	r2, [r3, #0]
			((GPIO_MODER_AF << GPIO_MODER_MODE2_Pos) | ~GPIO_MODER_MODE2_Msk) &
			((GPIO_MODER_AF << GPIO_MODER_MODE3_Pos) | ~GPIO_MODER_MODE3_Msk) &
			((GPIO_MODER_OUT << GPIO_MODER_MODE5_Pos) | ~GPIO_MODER_MODE5_Msk) &
			((GPIO_MODER_AF << GPIO_MODER_MODE13_Pos) | ~GPIO_MODER_MODE13_Msk) &
			((GPIO_MODER_AF << GPIO_MODER_MODE14_Pos) | ~GPIO_MODER_MODE14_Msk);
	GPIOC->MODER =
 800024c:	4b0b      	ldr	r3, [pc, #44]	; (800027c <GPIO_init+0x48>)
 800024e:	4a0c      	ldr	r2, [pc, #48]	; (8000280 <GPIO_init+0x4c>)
 8000250:	601a      	str	r2, [r3, #0]
			(GPIO_MODER_IN << GPIO_MODER_MODE13_Pos) | ~GPIO_MODER_MODE13_Msk;

	GPIOA->PUPDR =
 8000252:	23a0      	movs	r3, #160	; 0xa0
 8000254:	05db      	lsls	r3, r3, #23
 8000256:	2280      	movs	r2, #128	; 0x80
 8000258:	04d2      	lsls	r2, r2, #19
 800025a:	60da      	str	r2, [r3, #12]
			(GPIO_PUPDR_PU << GPIO_PUPDR_PUPD13_Pos);

	GPIOA->AFR[0] =
 800025c:	23a0      	movs	r3, #160	; 0xa0
 800025e:	05db      	lsls	r3, r3, #23
 8000260:	2288      	movs	r2, #136	; 0x88
 8000262:	01d2      	lsls	r2, r2, #7
 8000264:	621a      	str	r2, [r3, #32]
			(0x4 << GPIO_AFRL_AFSEL2_Pos) |
			(0x4 << GPIO_AFRL_AFSEL3_Pos);
	GPIOA->AFR[1] =
 8000266:	23a0      	movs	r3, #160	; 0xa0
 8000268:	05db      	lsls	r3, r3, #23
 800026a:	2200      	movs	r2, #0
 800026c:	625a      	str	r2, [r3, #36]	; 0x24
			(0x0 << GPIO_AFRH_AFSEL13_Pos) |
			(0x0 << GPIO_AFRH_AFSEL14_Pos);
}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40021000 	.word	0x40021000
 8000278:	ebfff7af 	.word	0xebfff7af
 800027c:	50000800 	.word	0x50000800
 8000280:	f3ffffff 	.word	0xf3ffffff

08000284 <DMA_init>:
void DMA_init(){
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_DMAEN;
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <DMA_init+0x24>)
 800028a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <DMA_init+0x24>)
 800028e:	2101      	movs	r1, #1
 8000290:	430a      	orrs	r2, r1
 8000292:	631a      	str	r2, [r3, #48]	; 0x30
    DMA1_CSELR->CSELR |=  (0x4 << DMA_CSELR_C7S_Pos);
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <DMA_init+0x28>)
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <DMA_init+0x28>)
 800029a:	2180      	movs	r1, #128	; 0x80
 800029c:	04c9      	lsls	r1, r1, #19
 800029e:	430a      	orrs	r2, r1
 80002a0:	601a      	str	r2, [r3, #0]
}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40021000 	.word	0x40021000
 80002ac:	400200a8 	.word	0x400200a8

080002b0 <UART_init>:
void UART_init(){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
    /**
    * UART2 ->  9600bps
    * TX -> DMA1_CH7
    */

    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <UART_init+0x38>)
 80002b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <UART_init+0x38>)
 80002ba:	2180      	movs	r1, #128	; 0x80
 80002bc:	0289      	lsls	r1, r1, #10
 80002be:	430a      	orrs	r2, r1
 80002c0:	639a      	str	r2, [r3, #56]	; 0x38
    USART2->BRR = FREQENCY_DEF / 9600;
 80002c2:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <UART_init+0x3c>)
 80002c4:	22da      	movs	r2, #218	; 0xda
 80002c6:	60da      	str	r2, [r3, #12]
    * stop1
    * over16
    * interrupt all disable
    * DMA Tx enable
    */
    USART2->CR1 |=
 80002c8:	4b08      	ldr	r3, [pc, #32]	; (80002ec <UART_init+0x3c>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b07      	ldr	r3, [pc, #28]	; (80002ec <UART_init+0x3c>)
 80002ce:	2109      	movs	r1, #9
 80002d0:	430a      	orrs	r2, r1
 80002d2:	601a      	str	r2, [r3, #0]
            USART_CR1_TE |
            USART_CR1_UE;
    //USART2->CR2;  //default
    USART2->CR3 |=
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <UART_init+0x3c>)
 80002d6:	689a      	ldr	r2, [r3, #8]
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <UART_init+0x3c>)
 80002da:	2180      	movs	r1, #128	; 0x80
 80002dc:	430a      	orrs	r2, r1
 80002de:	609a      	str	r2, [r3, #8]
            USART_CR3_DMAT;
}
 80002e0:	46c0      	nop			; (mov r8, r8)
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40004400 	.word	0x40004400

080002f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f4:	e000      	b.n	80002f8 <Reset_Handler+0x8>
 80002f6:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f8:	480c      	ldr	r0, [pc, #48]	; (800032c <LoopForever+0x6>)
  ldr r1, =_edata
 80002fa:	490d      	ldr	r1, [pc, #52]	; (8000330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <LoopForever+0xe>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000300:	e002      	b.n	8000308 <LoopCopyDataInit>

08000302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000306:	3304      	adds	r3, #4

08000308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800030c:	d3f9      	bcc.n	8000302 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030e:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000310:	4c0a      	ldr	r4, [pc, #40]	; (800033c <LoopForever+0x16>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000314:	e001      	b.n	800031a <LoopFillZerobss>

08000316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000318:	3204      	adds	r2, #4

0800031a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800031c:	d3fb      	bcc.n	8000316 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031e:	f000 f811 	bl	8000344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000322:	f7ff ff39 	bl	8000198 <main>

08000326 <LoopForever>:

LoopForever:
    b LoopForever
 8000326:	e7fe      	b.n	8000326 <LoopForever>
  ldr   r0, =_estack
 8000328:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000334:	080003b4 	.word	0x080003b4
  ldr r2, =_sbss
 8000338:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800033c:	2000001c 	.word	0x2000001c

08000340 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC_COMP_IRQHandler>
	...

08000344 <__libc_init_array>:
 8000344:	b570      	push	{r4, r5, r6, lr}
 8000346:	2600      	movs	r6, #0
 8000348:	4d0c      	ldr	r5, [pc, #48]	; (800037c <__libc_init_array+0x38>)
 800034a:	4c0d      	ldr	r4, [pc, #52]	; (8000380 <__libc_init_array+0x3c>)
 800034c:	1b64      	subs	r4, r4, r5
 800034e:	10a4      	asrs	r4, r4, #2
 8000350:	42a6      	cmp	r6, r4
 8000352:	d109      	bne.n	8000368 <__libc_init_array+0x24>
 8000354:	2600      	movs	r6, #0
 8000356:	f000 f819 	bl	800038c <_init>
 800035a:	4d0a      	ldr	r5, [pc, #40]	; (8000384 <__libc_init_array+0x40>)
 800035c:	4c0a      	ldr	r4, [pc, #40]	; (8000388 <__libc_init_array+0x44>)
 800035e:	1b64      	subs	r4, r4, r5
 8000360:	10a4      	asrs	r4, r4, #2
 8000362:	42a6      	cmp	r6, r4
 8000364:	d105      	bne.n	8000372 <__libc_init_array+0x2e>
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	00b3      	lsls	r3, r6, #2
 800036a:	58eb      	ldr	r3, [r5, r3]
 800036c:	4798      	blx	r3
 800036e:	3601      	adds	r6, #1
 8000370:	e7ee      	b.n	8000350 <__libc_init_array+0xc>
 8000372:	00b3      	lsls	r3, r6, #2
 8000374:	58eb      	ldr	r3, [r5, r3]
 8000376:	4798      	blx	r3
 8000378:	3601      	adds	r6, #1
 800037a:	e7f2      	b.n	8000362 <__libc_init_array+0x1e>
 800037c:	080003ac 	.word	0x080003ac
 8000380:	080003ac 	.word	0x080003ac
 8000384:	080003ac 	.word	0x080003ac
 8000388:	080003b0 	.word	0x080003b0

0800038c <_init>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr

08000398 <_fini>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr
